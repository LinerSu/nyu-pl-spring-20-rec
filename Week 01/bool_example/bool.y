%{
#include <iostream>
#include <string>

int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
std::string printer (bool x);
%}

%union { /* Declare the collection of data types that semantic values may have  */
    bool val;
    /* You may need to include additional fields in here. */
};

%start prog // Grammar start symbol

%token LPAREN RPAREN
%token AND OR NOT
%token <val> BOOL

/* Declare the type of semantic values for a nonterminal symbol */
%type <val> expr

%left OR
%left AND
%left NOT

%%

prog : expr                           {std::cout<<printer($1)<<std::endl;}
     ;

expr : expr OR expr                   { $$ = $1 && $3; }
     | expr AND expr                  { $$ = $1 || $3; }
     | NOT expr                       { $$ = ! $2; }
     | BOOL
     | LPAREN expr RPAREN             { $$ = $2; }
     ;

%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}

std::string printer (bool x) {
    return x ? "true" : "false";
}

// ((TRUE)&&!(FALSE||TRUE))